#!/bin/sh
#
# vim:ft=sh:fenc=UTF-8:ts=8:sts=8:sw=8:noexpandtab:foldmethod=marker:foldlevel=0:
#
# Author: Wael Nasreddine (TechnoGate) <wael@technogate.fr>
#
# This script should be used as the post-update hook of the mainline
# repository
#
# To enable it, copy it to the hooks folder of the git repository you
# are pushing to and make it executable (chmod +x post-update)

### Defining some color {{{
#
#

export FG_CLEAR="\033[0m"

# Regular ForeGround colors
export FG_BLACK="\033[0;30m"
export FG_RED="\033[0;31m"
export FG_GREEN="\033[0;32m"
export FG_YELLOW="\033[0;33m"
export FG_BLUE="\033[0;34m"
export FG_MAGNETA="\033[0;35m"
export FG_CYAN="\033[0;36m"
export FG_WHITE="\033[0;37m"

# Bold ForeGround colors
export FG_BLACK_B="\033[1;30m"
export FG_RED_B="\033[1;31m"
export FG_GREEN_B="\033[1;32m"
export FG_YELLOW_B="\033[1;33m"
export FG_BLUE_B="\033[1;34m"
export FG_MAGNETA_B="\033[1;35m"
export FG_CYAN_B="\033[1;36m"
export FG_WHITE_B="\033[1;37m"

# Background colors
export BG_BLACK="\033[40m"
export BG_RED="\033[41m"
export BG_GREEN="\033[42m"
export BG_YELLOW="\033[43m"
export BG_BLUE="\033[44m"
export BG_MAGNETA="\033[45m"
export BG_CYAN="\033[46m"
export BG_WHITE="\033[47m"

# GOOD, WARN and ERROR colors
export GOOD="${FG_GREEN_B}"
export WARN="${FG_YELLOW_B}"
export ERROR="${FG_RED_B}"

#
#
###}}}
### Function {{{
#
#

# print_info()#{{{
# print_info(printlevel, print [, newline [, prefixline ] ])
function print_info() {
    local NEWLINE='1'
    local PREFIXLINE='1'
    local STR=''
    local PREFIXTEXT=''

    # NOT ENOUGH ARGS
    if [ "${#}" -lt '2' ] ; then return 1; fi

    # WRONG printlevel
    if [ "${1}" -lt "0" ]; then
	print_error 1 "printlevel must be above or equal 0"
	return 1
    fi

    # If printlevel is 0, the text must be bolded
    if [ "${1}" -eq "0" ]; then
	PREFIXTEXT="${FG_WHITE_B}"
    fi

    # IF 3 OR MORE ARGS, CHECK IF WE WANT A NEWLINE AFTER PRINT
    if [ "${#}" -gt '2' ]
    then
	if isTrue "${3}"
	then
	    NEWLINE='1';
	else
	    NEWLINE='0';
	fi
    fi

    # IF 4 OR MORE ARGS, CHECK IF WE WANT TO PREFIX WITH A *
    if [ "${#}" -gt '3' ]
    then
	if isTrue "${4}"
	then
	    PREFIXLINE='1'
	else
	    PREFIXLINE='0'
	fi
    fi

    # STRUCTURE printlevel
    if [ "${1}" -gt "1" ]; then
	PRINTLEVEL="$(for i in $(seq 1 ${1}); do echo -ne "  "; done)"
    else
	PRINTLEVEL=" "
    fi

    # STRUCTURE DATA TO BE OUTPUT TO SCREEN, AND OUTPUT IT
    if [ "${PREFIXLINE}" = '1' ]
    then
	STR="${GOOD}*${FG_CLEAR}${PRINTLEVEL}${PREFIXTEXT}${2}${FG_CLEAR}"
    else
	STR="${PREFIXTEXT}${2}${FG_CLEAR}"
    fi

    if [ "${NEWLINE}" = '0' ]
    then
	echo -ne "${STR}"
    else
	echo -e "${STR}"
    fi

    return 0
}
#}}}
# print_error()#{{{
function print_error()
{
    GOOD=${ERROR} print_info "${@}" >&2
}
#}}}
# print_warning()#{{{
function print_warning()
{
    GOOD=${WARN} print_info "${@}"
}
#}}}
# git_parse_branch()#{{{
function git_parse_branch()
{
	git branch --no-color 2>| /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
}
#}}}
# die()#{{{
function die()
{
	if [ "${#}" -ge 1 ]; then
		echo ${@}
	fi
	if [ -f "${LOCK_FILE}" ]; then
		rm -f "${LOCK_FILE}"
	fi

	exit
}
#}}}

#
#
###}}}
### Environment {{{
#
#

# Project name
PROJECT_NAME="project"

# Define the lock file
LOCK_FILE="/tmp/${PROJECT_NAME}-push-devel.lock"

# Define the project path
TECHNOGATE_TEST_PATH="/var/www/${PROJECT_NAME}"

# Define the name/email of the committer of the prune message.
FULLNAME="Wael Nasreddine"
EMAIL="wael.nasreddine@gmail.com"

# setup.sql file location, must be an absolute path!
MYSQL_SETUP_FILE="${TECHNOGATE_TEST_PATH}/data/db/setup.sql"

# db data file list, must be an absolute path.
MYSQL_SETUP_DATA_FILES_LIST="${TECHNOGATE_TEST_PATH}/data/db/preprod_data_files.list"
MYSQL_SETUP_DATA_FILES_PATH="${TECHNOGATE_TEST_PATH}/data/db"

# MySQL Params
MYSQL_ROOT_USER="root"
MYSQL_ROOT_PASS=""
MYSQL_TEST_USER=""
MYSQL_TEST_PASS=""
MYSQL_TEST_DB=""

# Get the current git directory
CURRENT_DIR="$(pwd)"

# Redmine
REDMINE_PATH="/home/apps/redmine"

# Unset the GIT_DIR, work with PATHs instead
unset GIT_DIR

#
#
### }}}
### Prevent the script from being ran twice{{{
#
#

if [ -f "${LOCK_FILE}" ]; then
	print_error 0 "Testing already running, cancel the re-run"
	exit 0
fi

#
#
### }}}
### Refresh Redmine repositoory cache {{{

print_info 0 ">>> Refresh redmine repository cache."
${REDMINE_PATH}/script/runner 'Repository.fetch_changesets' -e production > /dev/null 2>&1

#
#
### }}}
### Is there any commits to the devel ?{{{
#
#

# Set it as to not continue
continue=0

if [ ! -d "${TECHNOGATE_TEST_PATH}/.git" ]; then
	# The testing directory does not exist, which means either something was committed to the devel branch or not the tests should run.
	continue=1
else
	# Find out the repo commit
	pushd "${CURRENT_DIR}" > /dev/null || die "Could not switch folder"
	newrev="`git rev-parse refs/heads/devel 2>/dev/null`"
	popd > /dev/null

	# Find out the test commit
	pushd ${TECHNOGATE_TEST_PATH} >/dev/null || die "Could not switch folder"
	oldrev="`git rev-parse refs/heads/devel 2>/dev/null`"
	popd > /dev/null

	if [ "${newrev}" == "${oldrev}" ]; then
		continue=0
	else
		continue=1
	fi
fi

if [ "${continue}" -eq 0 ]; then
	exit
fi

#
#
### }}}
### Create the lock file preventing another instance from running.{{{
#
#

touch "${LOCK_FILE}"

#
#
### }}}
### Sanity Checks {{{
#
#

if [ -z "${MYSQL_TEST_USER}" -o -z "${MYSQL_TEST_PASS}" -o -z "${MYSQL_TEST_DB}" -o -z "${MYSQL_ROOT_USER}" -o -z "${MYSQL_ROOT_PASS}" ]; then
	echo -e ${FG_CLEAR}
	print_error 0 "FATAL: You need to edit this file and fill the required information."
	rm -f "${LOCK_FILE}"
	exit 1
fi

#
#
### }}}
### Run the tests {{{
#
#

# Update the files {{{

# Prepare the folder to receive the data
print_info 0 ">>> Preparing the project testing folder."
if [ ! -d "${TECHNOGATE_TEST_PATH}/.git" ]; then
	echo -ne "${FG_WHITE}"
	mkdir -p "${TECHNOGATE_TEST_PATH}"
	pushd "${TECHNOGATE_TEST_PATH}" > /dev/null || die "Could not switch folder"
	git init
	git remote add origin "${CURRENT_DIR}"
	git config branch.master.remote origin
	git config branch.master.merge refs/heads/master
	git fetch origin
	git branch --track devel origin/devel
	git submodule init

	# Initializing the working directory
	git pull
	git submodule update --init

	# Prepare the htaccess to lock
	cat <<EOF >> "${TECHNOGATE_TEST_PATH}/public/.htaccess"
####
# Set the application environment
# Possible value:
#                   development
#                   production
#                   testing
#                   staging
#
SetEnv APPLICATION_ENV testing

####
# Rewrite
#
RewriteEngine On
RewriteBase /

# Maintenance mode.
#RewriteBase /
#RewriteCond %{REQUEST_URI} !^(.*)?/maintenance\.html$
#RewriteCond %{REQUEST_URI} !^(.*)?/img/logo/logo_200\.png$
#RewriteCond %{REMOTE_ADDR} !^80\.13\.82\.95
#RewriteRule ^(.*)$ maintenance.html [R=307,L]

RewriteCond %{REQUEST_FILENAME} -s [OR]
RewriteCond %{REQUEST_FILENAME} -l [OR]
RewriteCond %{REQUEST_FILENAME} -d
RewriteRule ^.*$ - [NC,L]
RewriteRule ^.*$ index.php [NC,L]
EOF


	# Create application.ini
	cat <<EOF > "${TECHNOGATE_TEST_PATH}/application/configs/application.ini"
[production]
phpSettings.display_startup_errors = 0
phpSettings.display_errors = 0

includePaths.library = ROOT_PATH "/library"

bootstrap.path = APPLICATION_PATH "/Bootstrap.php"
bootstrap.class = "Bootstrap"

autoloadernamespaces.0 = Technogate
autoloadernamespaces.1 = ActiveRecord

pluginPaths.Technogate_Application_Resource = "Technogate/Application/Resource"
pluginPaths.ZendX_Activerecord_Application_Resource= "ZendX/Activerecord/Application/Resource"
pluginPaths.Technogate_Application_Resource = "Technogate/Application/Resource"

resources.modulesetup[] =
resources.modules[] =

resources.frontController.throwerrors = 0

resources.frontController.controllerdirectory = APPLICATION_PATH "/controllers"
resources.frontController.params.prefixDefaultModule = false
resources.frontController.moduledirectory = APPLICATION_PATH "/modules"
resources.frontController.defaultModule = "default"
resources.frontController.plugins.moduleloader = Technogate_Controller_Plugin_ModuleLoader
resources.frontController.plugins.layoutloader = Technogate_Controller_Plugin_RequestedModuleLayoutLoader

resources.layout.layout = "layout"
resources.layout.layoutpath = APPLICATION_PATH "/modules/default/layouts"

resources.translate.adapter = gettext
resources.translate.data = ROOT_PATH "/data/locales"
resources.translate.options.scan = directory
resources.translate.locale = en

resources.activerecord.default_connection = production
resources.activerecord.model_directory = APPLICATION_PATH "/models"

resources.activerecord.connections.production.dsn.adapter = mysql
resources.activerecord.connections.production.dsn.user =
resources.activerecord.connections.production.dsn.pass =
resources.activerecord.connections.production.dsn.hostspec = localhost
resources.activerecord.connections.production.dsn.database =
resources.activerecord.connections.production.dsn.options.charset = utf8

fontPath = ROOT_PATH "/data/fonts"
captcha.font = "Arial.ttf"

app.domain = .example.com
app.uploadpath = ROOT_PATH "/public/uploads/"
app.uploadurl = /uploads/
app.host = www.example.com
app.domain = .example.com
app.cookieDomain = .example.com
app.googleMapsApiKey =
app.version = 0.1
app.title = Template
app.logo = img/logo.png
app.facebook.apikey =

app.models.mail.smtp.0.host = localhost
app.models.mail.smtp.0.params.auth = login
app.models.mail.smtp.0.params.username =
app.models.mail.smtp.0.params.password =
app.models.mail.smtp.0.params.ssl =
app.models.mail.smtp.0.params.port =
app.models.mail.from.name = Template
app.models.mail.from.email = template@example.com
app.models.mail.bcc.email = template@example.com
app.models.mail.charset = utf-8

app.models.security.secret_token = c5a15206e7983bb53900944e695e250eeca7d77bd38e235fad596b066b3d53021f313e38d62c4a4229678c127ff32fe346ebfa8010e98ddcea42a82e97cb5151

[production-scripts : production]

[staging : production]
phpSettings.display_startup_errors = 1
phpSettings.display_errors = 1
resources.frontController.throwerrors = 1

[testing : staging]
resources.activerecord.connections.testing.dsn.adapter = mysql
resources.activerecord.connections.testing.dsn.user = ${MYSQL_TEST_USER}
resources.activerecord.connections.testing.dsn.pass = ${MYSQL_TEST_PASS}
resources.activerecord.connections.testing.dsn.hostspec = localhost
resources.activerecord.connections.testing.dsn.database = ${MYSQL_TEST_DB}
resources.activerecord.default_connection = testing

[development : testing]
resources.activerecord.connections.development.dsn.adapter = mysql
resources.activerecord.connections.development.dsn.user =
resources.activerecord.connections.development.dsn.pass =
resources.activerecord.connections.development.dsn.hostspec = localhost
resources.activerecord.connections.development.dsn.database =
resources.activerecord.default_connection = development
EOF

else
	if [ ! -d "${TECHNOGATE_TEST_PATH}/.git" ]; then
		print_error 0 "The project's folder exists but it's not a git folder, aborting."
		rm -f "${LOCK_FILE}"
		exit 1
	fi

	# Go to the project's root
	pushd "${TECHNOGATE_TEST_PATH}" > /dev/null || die "Could not switch folder"

	# Revert to HEAD
	if ! git diff --quiet; then
		print_info 2 ">>> Reverting to HEAD"
		echo -ne "${FG_WHITE}"
		git reset --hard HEAD
	fi

	# Make sure we are on devel
	if [ `git_parse_branch` != 'devel' ]; then
		print_info 2 ">>> Switching to devel"
		echo -ne "${FG_WHITE}"
		git checkout devel
	fi

	# Revert to HEAD
	if ! git diff --quiet; then
		print_info 2 ">>> Reverting to HEAD"
		echo -ne "${FG_WHITE}"
		git reset --hard HEAD
	fi

	# Revert to origin/master
	if ! git diff --quiet origin/devel..devel; then
		print_info 2 "Removing anything locally committed."
		echo -ne "${FG_WHITE}"
		git reset --hard origin/devel
	fi
fi

# Pull the latest modifications
print_info 0 ">>> Pulling down the latest modifications"
echo -ne "${FG_WHITE}"
git pull
git submodule update --init

# Make sure we are on devel
if [ `git_parse_branch` != 'devel' ]; then
	print_info 2 ">>> Switching to devel"
	echo -ne "${FG_WHITE}"
	git checkout devel
fi

# Make sure permissions are ok
print_info 0 ">>> Making sure permissions are correct"
mkdir -p "${TECHNOGATE_TEST_PATH}/.zfcache"
chmod 777 "${TECHNOGATE_TEST_PATH}/.zfcache"
mkdir -p ${TECHNOGATE_TEST_PATH}/public/uploads
chmod 777 ${TECHNOGATE_TEST_PATH}/public/uploads
mkdir -p ${TECHNOGATE_TEST_PATH}/public/img/g
chmod 777 ${TECHNOGATE_TEST_PATH}/public/img/g
mkdir -p ${TECHNOGATE_TEST_PATH}/temp/logs
chmod 777 ${TECHNOGATE_TEST_PATH}/temp/logs


# Force Zend to re-cache
print_info 0 ">>> Removing cached zend files."
rm -f ${ROOT_PATH}/.zfcache/*

# Empty the mail log file
print_info 0 "Empty the log of mails"
echo -n '' > ${ROOT_PATH}/temp/logs/mail.log
chmod a+w ${ROOT_PATH}/temp/logs/mail.log

#}}}
# Update the database {{{
# Drop the current DB
print_info 0 ">>> Resetting the database"
print_info 2 ">>> Emptying the current database."
mysql --user="${MYSQL_ROOT_USER}" --password="${MYSQL_ROOT_PASS}" --default-character-set=utf8 << EOS

DROP DATABASE IF EXISTS \`${MYSQL_TEST_DB}\`;
CREATE DATABASE \`${MYSQL_TEST_DB}\`;
EOS

print_info 2 ">>> Dropping the old test user."
mysql --user="${MYSQL_ROOT_USER}" --password="${MYSQL_ROOT_PASS}" --default-character-set=utf8 << EOS &>/dev/null
DROP USER '${MYSQL_TEST_USER}'@'localhost';
EOS

print_info 2 ">>> Create the test user."
mysql --user="${MYSQL_ROOT_USER}" --password="${MYSQL_ROOT_PASS}" --default-character-set=utf8 << EOS
CREATE USER '${MYSQL_TEST_USER}'@'localhost' IDENTIFIED BY '${MYSQL_TEST_PASS}';
GRANT USAGE ON * . * TO '${MYSQL_TEST_USER}'@'localhost' WITH MAX_QUERIES_PER_HOUR 0 MAX_CONNECTIONS_PER_HOUR 0 MAX_UPDATES_PER_HOUR 0 MAX_USER_CONNECTIONS 0;
GRANT SELECT , INSERT , UPDATE , DELETE , CREATE , DROP , INDEX , ALTER , CREATE TEMPORARY TABLES , CREATE VIEW , SHOW VIEW , CREATE ROUTINE, ALTER ROUTINE, EXECUTE ON \`${MYSQL_TEST_DB}\` . * TO '${MYSQL_TEST_USER}'@'localhost';
FLUSH PRIVILEGES;
EOS

# Put the structure back
print_info 2 ">>> Deploying the tables structure."
mysql --user="${MYSQL_ROOT_USER}" --password="${MYSQL_ROOT_PASS}" --default-character-set=utf8 "${MYSQL_TEST_DB}" < ${MYSQL_SETUP_FILE}

# Put the data back
print_info 2 ">>> Inserting all data."
for file in `cat ${MYSQL_SETUP_DATA_FILES_LIST}`; do
	if [ ! -f "${MYSQL_SETUP_DATA_FILES_PATH}/${file}" ]; then
		echo "FATAL: The file ${file} cannot be found."
	fi
	mysql --user="${MYSQL_ROOT_USER}" --password="${MYSQL_ROOT_PASS}" --default-character-set=utf8 "${MYSQL_TEST_DB}" < "${MYSQL_SETUP_DATA_FILES_PATH}/${file}"
done

#}}}
# Run the tests {{{
print_info 2 ">>> Running the tests."
echo -ne "${FG_WHITE}"
php -d display_errors=Off -d error_reporting="E_ALL & ~E_NOTICE & ~E_DEPRECATED & ~E_WARNING & ~E_USER_NOTICE & ~E_USER_DEPRECATED & ~E_USER_WARNING" "${TECHNOGATE_TEST_PATH}/tests/run.php" --operation="test-preprod-branch-devel"
if [ $? -ne 0 ]; then
	print_error 3 "Unit tests failed to run."
	exit_status=1
else
	print_info 2 "Unit Tests ran sucessfully."
	exit_status=0
fi
# }}}

#
#
### }}}
### Exiting {{{
#
#

popd > /dev/null
rm -f "${LOCK_FILE}"
exit ${exit_status}

#
#
### }}}
